#include<stdio.h>
#include"freertos/FreeRTOS.h"
#include"freertos/task.h"
#include"freertos/event_groups.h"
#include"driver/gpio.h"
#include"driver/ledc.h"
#include"esp_log.h"
//定义LED管脚
#define GPIO_LED GPIO_NUM_2
//定义事件组
#define LED_FULL  (1<<0)
#define LED_emply (1<<1)
//创建事件句柄
static EventGroupHandle_t EVENT_LED_handle = NULL;;
//回调函数
bool IRAM_ATTR ledc_cb(const ledc_cb_param_t *param, void *user_arg)
{
    BaseType_t xHigherPriorityTaskWoken;
    //检测当前处于满值或空值返回事件
    if(param->duty)
    {   
        //返回已满事件通知
        xEventGroupSetBitsFromISR(EVENT_LED_handle,LED_FULL,&xHigherPriorityTaskWoken);
    }
    else
    {   
        //返回已空事件
        xEventGroupSetBitsFromISR(EVENT_LED_handle,LED_emply,&xHigherPriorityTaskWoken);
    }
    return xHigherPriorityTaskWoken;
}
//开始渐变
void task_led(void* param)
{
    ESP_LOGI("task_led","start");
    //初始化等待事件二进制
    EventBits_t Event_wait_bit;
    while (1)
    {
        //等待当前处于满值或空值返回事件两个事件，五秒期限
        Event_wait_bit = xEventGroupWaitBits(EVENT_LED_handle,LED_FULL|LED_emply,pdTRUE,pdFALSE,pdMS_TO_TICKS(5000));

        ESP_LOGI("task_led","Event_wait_bit=%ld",Event_wait_bit);
        //判断状态
        if  (Event_wait_bit & LED_FULL)
        {
            ESP_LOGI("LED","cloes");

            //创建一个渐变
            ledc_set_fade_with_time(LEDC_LOW_SPEED_MODE,LEDC_CHANNEL_0,0,2000);

            //开始一个渐变
            ledc_fade_start(LEDC_LOW_SPEED_MODE,LEDC_CHANNEL_0,LEDC_FADE_NO_WAIT);
        
        }
        //判断状态
        if (Event_wait_bit & LED_emply)
        {

            ESP_LOGI("LED","open");

            //创建一个渐变
            ledc_set_fade_with_time(LEDC_LOW_SPEED_MODE,LEDC_CHANNEL_0,8191,2000);
            
            //开始一个渐变
            ledc_fade_start(LEDC_LOW_SPEED_MODE,LEDC_CHANNEL_0,LEDC_FADE_NO_WAIT);
                
        }
        //再次回调函数
        ledc_cbs_t ledc_callback = {
            .fade_cb = ledc_cb,
        };
        ledc_cb_register(LEDC_LOW_SPEED_MODE,LEDC_CHANNEL_0,&ledc_callback,NULL);

    }
    
}

void app_main() 
{   
    //创建事件组
    EVENT_LED_handle = xEventGroupCreate();

    //初始化管脚
    gpio_config_t led_gpio = {
        .pin_bit_mask   = (1<<GPIO_LED),
        .pull_down_en   = GPIO_PULLDOWN_DISABLE,
        .pull_up_en     = GPIO_PULLUP_DISABLE,
        .mode           = GPIO_MODE_OUTPUT,
        .intr_type      = GPIO_INTR_DISABLE,
    };
    gpio_config(&led_gpio);

    //初始化定时器
    ledc_timer_config_t led_timer = {
        .speed_mode      = LEDC_LOW_SPEED_MODE,
        .duty_resolution = LEDC_TIMER_13_BIT,
        .timer_num       = LEDC_TIMER_0,
        .freq_hz         = 5000,
        .clk_cfg         = LEDC_AUTO_CLK,
    };
    ledc_timer_config(&led_timer);

    //初始化ledc通道
    ledc_channel_config_t led_channel = {
        .gpio_num   = GPIO_LED,
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .channel    = LEDC_CHANNEL_0,
        .intr_type  = LEDC_INTR_DISABLE,
        .timer_sel  = LEDC_TIMER_0,
        .duty       = 0,
        .hpoint     = 0
    };
    ledc_channel_config(&led_channel);
    //开启硬件PWM
    ledc_fade_func_install(0);
    
    //创建一个渐变
    ledc_set_fade_with_time(LEDC_LOW_SPEED_MODE,LEDC_CHANNEL_0,8192,5000);

    //启用一个渐变
    ledc_fade_start(LEDC_LOW_SPEED_MODE,LEDC_CHANNEL_0,LEDC_FADE_NO_WAIT);

    //初始化回调函数
    ledc_cbs_t ledc_callback = {
        .fade_cb = ledc_cb,
    };
    //启用回调函数
    ledc_cb_register(LEDC_LOW_SPEED_MODE,LEDC_CHANNEL_0,&ledc_callback,NULL);   
    
    //运行重复渐变任务
    xTaskCreatePinnedToCore(task_led,"task_led",2048,NULL,3,NULL,1);
}
